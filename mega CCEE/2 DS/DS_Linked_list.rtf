{\rtf1\ansi\ansicpg1252\deff0\deflang16393{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil\fcharset161 Calibri;}}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22\par
 \par
MCQs on Linked list with answers\par
02-19-2015 05:51 AM \par
\par
MCQs on Linked list with answers\par
\par
\par
1.\tab In a circular linked list\par
\par
a)\tab Components are all linked together in some sequential manner.\par
b)\tab There is no beginning and no end.\par
c)\tab Components are arranged hierarchically.\par
d)\tab Forward and backward traversal within the list is permitted.\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
2.\tab A linear collection of data elements where the linear node is given by means of pointer is called?\par
\par
a)\tab Linked list\par
b)\tab Node list\par
c)\tab Primitive list\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: A\par
\par
\par
\par
\par
3.\tab Which of the following operations is performed more efficiently by doubly linked list than by singly linked list?\par
\par
a)\tab Deleting a node whose location in given\par
b)\tab Searching of an unsorted list for a given item\par
c)\tab Inverting a node after the node with given location\par
d)\tab Traversing a list to process each node\par
View Answer / Hide Answer\par
\par
ANSWER: A\par
\par
\par
\par
\par
4.\tab Consider an implementation of unsorted singly linked list. Suppose it has its representation with a head and tail pointer. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab Insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the last node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I,II and III\par
d)\tab I,II and IV\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
5.\tab Consider an implementation of unsorted singly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab Insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the last node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I,II and III\par
d)\tab I,II and IV\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
6.\tab Consider an implementation of unsorted doubly linked list. Suppose it has its representation with a head pointer and tail pointer. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab Insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the end node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I,II and III\par
d)\tab I,II,III and IV\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
7.\tab Consider an implementation of unsorted doubly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab Insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the end node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I,II and III\par
d)\tab I,II,III and IV\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
8.\tab Consider an implementation of unsorted circular linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab Insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the end node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I, II, III and IV\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
9.\tab Consider an implementation of unsorted circular doubly linked list. Suppose it has its representation with a head pointer only. Given the representation, which of the following operation can be implemented in O(1) time?\par
\par
i)\tab Insertion at the front of the linked list\par
ii)\tab insertion at the end of the linked list\par
iii)\tab Deletion of the front node of the linked list\par
iv)\tab Deletion of the end node of the linked list\par
\par
a)\tab I and II\par
b)\tab I and III\par
c)\tab I, II and III\par
d)\tab I,II,III and IV\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
10.\tab In linked list each node contain minimum of two fields. One field is data field to store the data second field is?\par
\par
a)\tab Pointer to character\par
b)\tab Pointer to integer\par
c)\tab Pointer to node\par
d)\tab Node\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
11.\tab What would be the asymptotic time complexity to add a node at the end of singly linked list, if the pointer is initially pointing to the head of the list?\par
\par
a)\tab O(1)\par
b)\tab O(n)\par
c)\tab\f1\'e8 (n)\par
d)\tab\'e8 (1)\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
12.\tab What would be the asymptotic time complexity to add an element in the linked list?\par
\par
a)\tab O(1)\par
b)\tab O(n)\par
c)\tab O(n2)\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
13.\tab What would be the asymptotic time complexity to find an element in the linked list?\par
\par
a)\tab O(1)\par
b)\tab O(n)\par
c)\tab O(n2)\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
14.\tab What would be the asymptotic time complexity to insert an element at the second position in the linked list?\par
\par
a)\tab O(1)\par
b)\tab O(n)\par
c)\tab O(n2)\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: A\par
\par
\par
\par
\par
15.\tab The concatenation of two list can performed in O(1) time. Which of the following variation of linked list can be used?\par
\par
a)\tab Singly linked list\par
b)\tab Doubly linked list \par
c)\tab Circular doubly linked list\par
d)\tab Array implementation of list\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
16.\tab Consider the following definition in c programming language\par
\par
struct node\par
\{\par
int data;\par
struct node * next;\par
\}\par
typedef struct node NODE;\par
NODE *ptr;\par
\par
Which of the following c code is used to create new node?\par
\par
a)\tab ptr=(NODE*)malloc(sizeof(NODE));\par
b)\tab ptr=(NODE*)malloc(NODE);\par
c)\tab ptr=(NODE*)malloc(sizeof(NODE*));\par
d)\tab ptr=(NODE)malloc(sizeof(NODE));\par
View Answer / Hide Answer\par
\par
ANSWER: A\par
\par
\par
\par
\par
17.\tab A variant of linked list in which last node of the list points to the first node of the list is?\par
\par
a)\tab Singly linked list\par
b)\tab Doubly linked list\par
c)\tab Circular linked list\par
d)\tab Multiply linked list\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
18.\tab In doubly linked lists, traversal can be performed?\par
\par
a)\tab Only in forward direction\par
b)\tab Only in reverse direction\par
c)\tab In both directions\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
19.\tab What kind of linked list is best to answer question like \ldblquote What is the item at position n?\rdblquote\par
\par
a)\tab Singly linked list\par
b)\tab Doubly linked list\par
c)\tab Circular linked list\par
d)\tab Array implementation of linked list\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
20.\tab A variation of linked list is circular linked list, in which the last node in the list points to first node of the list. One problem with this type of list is?\par
\par
a)\tab It waste memory space since the pointer head already points to the first node and thus the list node does not need to point to the first node.\par
b)\tab It is not possible to add a node at the end of the list.\par
c)\tab It is difficult to traverse the list as the pointer of the last node is now not NULL\par
d)\tab All of above\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
21.\tab A variant of the linked list in which none of the node contains NULL pointer is?\par
\par
a)\tab Singly linked list\par
b)\tab Doubly linked list\par
c)\tab Circular linked list\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: C\par
\par
\par
\par
\par
22.\tab In circular linked list, insertion of node requires modification of?\par
\par
a)\tab One pointer\par
b)\tab Two pointer\par
c)\tab Three pointer\par
d)\tab None\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
23.\tab Which of the following statements about linked list data structure is/are TRUE?\par
\par
a)\tab Addition and deletion of an item to/ from the linked list require modification of the existing pointers\par
b)\tab The linked list pointers do not provide an efficient way to search an item in the linked list\par
c)\tab Linked list pointers always maintain the list in ascending order\par
d)\tab The linked list data structure provides an efficient way to find kth element in the list\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
24.\tab Linked lists are not suitable to for the implementation of?\par
\par
a)\tab Insertion sort\par
b)\tab Radix sort\par
c)\tab Polynomial manipulation\par
d)\tab Binary search\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
25.\tab In worst case, the number of comparison need to search a singly linked list of length n for a given element is\par
\par
a)\tab log n\par
b)\tab n/2\par
c)\tab log2n-1\par
d)\tab n\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
26.\tab consider the function f defined here:\par
\par
struct item\par
\{\par
int data;\par
struct item * next;\par
\};\par
int f (struct item *p)\par
\{\par
return((p==NULL) ||((p->next==NULL)||(p->data<=p->next->data) && (p->next)));\par
\}\par
\par
For a given linked list p, the function f returns 1 if and only if\par
\par
a)\tab the list is empty or has exactly one element\par
b)\tab the element in the list are sorted in non-decreasing order of data value\par
c)\tab the element in the list are sorted in non-increasing order of data value\par
d)\tab not all element in the list have the same data value\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\par
\par
\par
\par
27.\tab The following C function takes a singly linked list as input argument. It modifies the list by moving the last element to the front of the list and returns the modified list. Some part of the code left blank.\par
\par
typedef struct node\par
\{\par
int value;\par
struct node* next;\par
\}Node;\par
Node* move_to_front(Node* head)\par
\{\par
Node* p, *q;\par
if((head==NULL) || (head->next==NULL))\par
return head;\par
q=NULL;\par
p=head;\par
while(p->next != NULL)\par
\{\par
q=p;\par
p=p->next;\par
\}\par
return head;\par
\}\par
\par
Choose the correct alternative to replace the blank line\par
\par
a)\tab q=NULL; p->next=head; head =p ;\par
b)\tab q->next=NULL; head =p; p->next = head;\par
c)\tab head=p; p->next=q; q->next=NULL;\par
d)\tab q->next=NULL; p->next=head; head=p;\par
View Answer / Hide Answer\par
\par
ANSWER: D\par
\par
\par
\par
\par
28.\tab The following C Function takes a singly- linked list of integers as a parameter and rearranges\par
the elements of the lists. The function is called with the list containing the integers 1,2,3,4,5,6,7 in the given order. What will be the contents of the list after the function completes execution?\par
\par
struct node\{\par
int value;\par
struct node* next;\par
\};\par
void rearrange (struct node* list) \par
\{\par
struct node *p,q; \par
int temp;\par
if (! List || ! list->next) return;\par
p->list; q=list->next; \par
while(q)\par
\{\par
temp=p->value; p->value=q->value;\par
q->value=temp;p=q->next;\par
q=p?p->next:0;\par
\}\par
\}\par
\par
a)\tab 1, 2, 3, 4, 5, 6, 7\par
b)\tab 2, 1, 4, 3, 6, 5, 7\par
c)\tab 1, 3, 2, 5, 4, 7, 6\par
d)\tab 2, 3, 4, 5, 6, 7, 1\par
View Answer / Hide Answer\par
\par
ANSWER: B\par
\f0\par
}
 